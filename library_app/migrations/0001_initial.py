# Generated by Django 5.2 on 2025-04-24 06:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('authorID', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('bookID', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('edition', models.CharField(max_length=50)),
                ('total_copies', models.IntegerField()),
                ('available_copies', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Librarian',
            fields=[
                ('librarianID', models.IntegerField(primary_key=True, serialize=False)),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('memberID', models.IntegerField(primary_key=True, serialize=False)),
                ('address', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('start_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.book')),
            ],
            options={
                'unique_together': {('author', 'book')},
            },
        ),
        migrations.AddField(
            model_name='author',
            name='books',
            field=models.ManyToManyField(through='library_app.BookAuthor', to='library_app.book'),
        ),
        migrations.CreateModel(
            name='BookCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.book')),
            ],
        ),
        migrations.CreateModel(
            name='BookCopy',
            fields=[
                ('copyID', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Borrowed', 'Borrowed'), ('Lost', 'Lost'), ('Damaged', 'Damaged')], default='Available', max_length=20)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.book')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('categoryID', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('books', models.ManyToManyField(through='library_app.BookCategory', to='library_app.book')),
            ],
        ),
        migrations.AddField(
            model_name='bookcategory',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.category'),
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('loanID', models.AutoField(primary_key=True, serialize=False)),
                ('issue_date', models.DateField(default=django.utils.timezone.now)),
                ('due_date', models.DateField()),
                ('return_date', models.DateField(blank=True, null=True)),
                ('loan_status', models.CharField(choices=[('Borrowed', 'Borrowed'), ('Returned', 'Returned'), ('Overdue', 'Overdue')], default='Borrowed', max_length=50)),
                ('copy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.bookcopy')),
                ('librarian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.librarian')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.member')),
            ],
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('fineID', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(choices=[('Unpaid', 'Unpaid'), ('Paid', 'Paid')], default='Unpaid', max_length=50)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('loan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.loan')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventID', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('event_time', models.TimeField()),
                ('librarian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.librarian')),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='library_app.member')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('librarian', 'Librarian'), ('member', 'Member')], default='member', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('librarian', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='library_app.librarian')),
                ('member', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='library_app.member')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservationID', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Fulfilled', 'Fulfilled'), ('Cancelled', 'Cancelled')], default='Active', max_length=20)),
                ('reservation_date', models.DateField(default=django.utils.timezone.now)),
                ('exp_return_date', models.DateField()),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.book')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library_app.member')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='bookcategory',
            unique_together={('category', 'book')},
        ),
    ]
